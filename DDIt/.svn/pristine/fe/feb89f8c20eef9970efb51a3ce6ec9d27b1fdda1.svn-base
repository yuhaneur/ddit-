package kr.or.ddit.project.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.paging.BootstrapPaginationRenderer;
import kr.or.ddit.paging.PaginationInfo;
import kr.or.ddit.paging.PaginationRenderer;
import kr.or.ddit.paging.SimpleCondition;
import kr.or.ddit.project.service.ProjectService;
import kr.or.ddit.vo.ProjectPostVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/project/{projectNo}")

public class ProjectBoardController {
	public static final String MODELNAME="newBoard";
	
	@Autowired
	private ProjectService service;
	
	@ModelAttribute(MODELNAME)
	public ProjectPostVO newBoard() {
		return new ProjectPostVO();
	}
	
	@GetMapping("post")
	public String postList(Model model
			,@RequestParam(required = false , defaultValue = "1") int currentPage
			,@ModelAttribute("condition")SimpleCondition simpleCondition
			,@PathVariable int projectNo
			) {
		simpleCondition.setSearchType("post");
		PaginationInfo paging = new PaginationInfo(4,5);
		paging.setCurrentPage(currentPage);
		paging.setSimpleCondition(simpleCondition);
		
		List<ProjectPostVO> post = service.selectPostList(paging, projectNo);
		model.addAttribute("postList",post);
		
		PaginationRenderer render = new BootstrapPaginationRenderer();
		model.addAttribute("pagingFunction", "paging");
		String pagingHTML = render.renderPagination(paging, "paging");
		model.addAttribute("pagingHTML",pagingHTML);
			
		return "project/postList";
	}
	
	@GetMapping("postinsert")
	public String handler(Model model) {
		
		return "project/postInsert";
	}
	@PostMapping("postinsert")
	public String projectInsert(
			@PathVariable(value="projectNo") int projectNo,
			@Valid @ModelAttribute(MODELNAME) ProjectPostVO newBoard
			, BindingResult errors
			, RedirectAttributes redirectAttributes
			) {
		log.info("newBoard : {} ",newBoard);
		if(errors.hasErrors()) {
			System.out.println(errors.getAllErrors());
			redirectAttributes.addFlashAttribute(MODELNAME, newBoard);
			redirectAttributes.addFlashAttribute(BindingResult.MODEL_KEY_PREFIX + MODELNAME,errors
					);
			return "redirect:/project/postinsert";
		}else {
			service.insertPost(newBoard);
			return "redirect:/project/{projectNo}/post";
		}
		
	}
	@GetMapping("{projectPostNo}/postDetail")
	public String postDetail(@PathVariable int projectPostNo, Model model) {
		
		ProjectPostVO post = service.readPost(projectPostNo);
		
		model.addAttribute("post",post);
		return "project/postDetail";
		
	}
	
	
	
	
	
	
	
	
	
}
