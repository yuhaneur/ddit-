package kr.or.ddit.school.service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kr.or.ddit.school.dao.SchoolDAO;
import kr.or.ddit.vo.ClassAllocationVO;
import kr.or.ddit.vo.ClassVO;
import kr.or.ddit.vo.LectureRoomVO;
import kr.or.ddit.vo.ScheduleVO;
import kr.or.ddit.vo.SjManagerVO;
import kr.or.ddit.vo.SjMapping;
import kr.or.ddit.vo.SjVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class SchoolServiceImpl implements SchoolService{

	@Autowired
	private SchoolDAO dao;
	@Override
	public List<LectureRoomVO> selectLectureRoomList() {
		return dao.selectLectureRoomList();
	}

	@Override
	public List<ClassVO> selectClassList() {
		List<ClassVO> classList =  dao.selectClassList();
		return classList;
	}

	@Override
	public int insertClass(ClassVO classVO) {
		int cnt = dao.insertClass(classVO);
		// 클래스 시작일 뽑아와서
		String classCode = classVO.getClassCode();
		ClassVO classInfo =  dao.scheduleInfo(classCode);
		String start = classInfo.getClassCreationDe();
		String end = classInfo.getClassEndDe();
		// 초까지 다나와서 일까지만 자르기
		start = start.substring(0,10);
		end = end.substring(0, 10);
		// DateTimeFormatter.ISO_DATE : 'yyyy-MM-dd' 로 변환하는 상수
		LocalDate startDate = LocalDate.parse(start, DateTimeFormatter.ISO_DATE);
		log.info("classInfo : {} ",classInfo);
		
		// 클래스 안에 sjvo리스트 정보 빼기 교육시간 필요함
		List<SjVO> classInSjvo =  classInfo.getEdcCrse().getSjList();
        for (SjVO sjVO : classInSjvo) {
        	// 교육시간빼고
			long edcTime = sjVO.getEdcTime();
			// 일수로 변환
			long edcDay = edcTime/4;
			//교과목 순서
			sjVO.getSjOrdr();
			//교과목 이름
			sjVO.getSjName();
			for(long i=0; i<edcDay;i++) {
			// sj_ordr 1인거 먼저 인서트 그다음 2인거 인서트 주르륵하다가 1이랑 2가 edcDay만큼 반복 저장됬으면
			// 다음 3과 4 인서트 위와동일후 나머지 저장
			// 시작날짜와 끝날짜는 LocalDate 시작날짜 =startDate.plusDays(i);
			// 위에걸로 ScheduleVO schedule = new ScheduleVO(); 여기에 set으로 둘다저장
				
			}
		}
		if(cnt>0) {
			
//			dao.insertSchedule(null)
		}
		return cnt;
	}

	@Override
	public int updateClass(ClassVO classVO) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public List<SjVO> selectClassInteacher(SjManagerVO sjManagerVO) {
		return dao.selectClassInteacher(sjManagerVO);
	}

	@Override
	public int insertClassInteacher(SjMapping sjMappingVO,String mnOrAt) {
		int cnt = dao.insertClassInteacher(sjMappingVO);
		if(cnt >0) {
			ClassAllocationVO classAllocation = new ClassAllocationVO();
			classAllocation.setSjMappingCode(sjMappingVO.getSjMappingCode());
			classAllocation.setMnOrAt(mnOrAt);
			cnt += dao.insertClassAllocation(classAllocation);
		}
		return cnt;
	}

	@Override
	public ClassVO selectClass(String classCode) {
		ClassVO classvo = dao.selectClass(classCode);
		return classvo;
	}

	@Override
	public List<SjMapping> selectSjTeacherList(String classCode) {
		List<SjMapping> sjMappingList = dao.selectSjTeacherList(classCode);
		return sjMappingList;
	}

	@Override
	public ClassVO scheduleInfo(String classCode) {
		ClassVO classVO =  dao.scheduleInfo(classCode);
		return classVO;
	}


}
