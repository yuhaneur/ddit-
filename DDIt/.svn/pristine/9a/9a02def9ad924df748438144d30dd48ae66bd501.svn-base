package kr.or.ddit.project.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kr.or.ddit.exception.ProjectException;
import kr.or.ddit.paging.PaginationInfo;
import kr.or.ddit.project.dao.ProjectDao;
import kr.or.ddit.vo.CmmnCodeVO;
import kr.or.ddit.vo.ProjectStudentMappingVO;
import kr.or.ddit.vo.ProjectVO;
import kr.or.ddit.vo.UsersVO;
import kr.or.ddit.vo.WorkVO;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@Service
public class ProjectServiceImpl implements ProjectService{
	
		@Autowired
		private ProjectDao dao;

	
		

		@Override
		public int createProject(ProjectVO projectVO) {
			int cnt = dao.insertProject(projectVO);
			if(cnt>0)return cnt;
			return cnt;
		}

		@Override
		public List<ProjectVO> retrieveProjectList(PaginationInfo paging) {
			int totalRecord = dao.selectTotalRecordProject(paging);
			paging.setTotalRecord(totalRecord);
			List<ProjectVO> project = dao.selectProjectList(paging);
			
			return project;
		}

		@Override
		public ProjectVO readProject(int projectNo) {
			ProjectVO project =Optional.ofNullable(dao.readProject(projectNo))
					.orElseThrow(()->new ProjectException(String.format("%d 번 프로젝트 없음",projectNo)));
				
			return project;
		}

		@Override
		public List<ProjectVO> projectList() {
			List<ProjectVO> project = dao.projectList();
			return project;
		}

		@Override
		public List<WorkVO> retrieveWorkList(PaginationInfo paging, int projectNo) {
			int totalRecord = dao.selectTotalRecordWork(paging, projectNo);
			paging.setTotalRecord(totalRecord);
			List<WorkVO> work = dao.selectWokrList(paging, projectNo);
			return work;
		}

		@Override
		public int createWork(WorkVO workVO) {
			int cnt = dao.insertWork(workVO);
			if(cnt>0)return cnt;
			return cnt;
		
		}

		@Override
		public List<WorkVO> workList() {
			List<WorkVO> work = dao.workList();
			
			return work;
		}

		@Override
		public List<UsersVO> retrieveUserList(PaginationInfo paging, int projectNo) {
			int totalRecord = dao.selectTotalRecordTeam(paging,projectNo);
			paging.setTotalRecord(totalRecord);
			List<UsersVO> user = dao.selectTeamList(paging,projectNo);
			
			return user;
		}

		@Override
		public List<UsersVO> userList() {
			List<UsersVO> user = dao.TeamList();
			return user;
		}

		@Override
		public List<CmmnCodeVO> CmmnCodeList() {
			List<CmmnCodeVO> code = dao.CmmnCodeList();
			log.info("codeList==>>>>>>>>>>>> {}", code);
			return code;
		}

		@Override
		public int insertTeam(ProjectStudentMappingVO projectStudentMappingVO) {
			int cnt = dao.insertTeam(projectStudentMappingVO);
			if(cnt>0)return cnt;
			return cnt;
		}

		@Override
		public int updateTeam(ProjectStudentMappingVO projectStudentMappingVO) {
			int cnt = dao.updateTeam(projectStudentMappingVO);
			if(cnt>0) return cnt;
			return cnt;
		}

		@Override
		public int deleteTeam(String userId) {
			
			return dao.deleteTeam(userId);
		}

		@Override
		public List<ProjectStudentMappingVO> myTeamList(PaginationInfo paging, int projectNo) {
			int totalRecord = dao.selectTotalRecordMyTeam(paging, projectNo);
			List<ProjectStudentMappingVO> myTeam =dao.MyTeamList(paging, projectNo);
			paging.setTotalRecord(totalRecord);
			
			return myTeam;
		}
		
		
}
