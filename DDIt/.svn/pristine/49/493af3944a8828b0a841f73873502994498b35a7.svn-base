package kr.or.ddit.sns.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.sns.service.SnsService;
import kr.or.ddit.vo.SnsAnswerVO;
import kr.or.ddit.vo.SnsFeedVO;

@Controller
@RequestMapping("/sns")
public class SnsController {
	private static final String MODELNAME = "newFeed";
	
	@Autowired
	private SnsService service;
	
	@ModelAttribute(MODELNAME)
	public SnsFeedVO newFeed() {
		return new SnsFeedVO();
	}
	
	// 피드 리스트 출력
	@GetMapping("/feedList.do")
	public String snsFeedListTest(
			Model model
	) {
		List<SnsFeedVO> feedList = service.readFeedList();
		model.addAttribute("feedList", feedList);
		return "sns/snsFeed";
	}
	

	// 피드 등록
	@PostMapping("/feedList.do")
	public String snsFeedInsert(
			@ModelAttribute SnsFeedVO feedVO
			) {
		service.createFeed(feedVO);
		return "redirect:/sns/feedList.do";
	}
	
	// 피드 수정
	@ResponseBody
	@PutMapping(value = "/feedUpdate.do", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	public Map<String, String> snsFeedUpdate(
			@RequestBody SnsFeedVO feedVO
			) {
		int chk = service.updateFeed(feedVO); 
		Map<String, String> result = new HashMap<>();
		if(chk > 0) {
			result.put("result", "ok");
		}else {
			result.put("result", "fail");
		}
		return result;
	}
	
	// 피드 삭제
	@ResponseBody
	@DeleteMapping("/feedDelete.do")
	public Map<String, String> snsFeedDelete(
			@RequestBody Long snsFeedNo
			) {
		int chk = service.deleteFeed(snsFeedNo);
		Map<String, String> result = new HashMap<>();
		if(chk > 0) {
			result.put("result", "ok");
		}else {
			result.put("result", "fail");
		}
		return result;
	}
	
	// 댓글 리스트 출력
	@ResponseBody
	@GetMapping("/{snsFeedNo}")
	public List<SnsAnswerVO> snsAnswerListTest(
		@PathVariable int snsFeedNo
	) {
		List<SnsAnswerVO> answerList = service.readAnswerList(snsFeedNo);
		return answerList;
	}

	// 팔로우 리스트
	@GetMapping("/follow.do")
	public String snsfollowListTest() {
		return "sns/snsFollow";
	}
	
	/**
	 * @param snsAnswerVo
	 * @return 댓글 등록
	 */
	@ResponseBody
	@PostMapping("/answerInsert.do")
	public Map<String, String> snsAnswerInsert(
		@RequestBody SnsAnswerVO snsAnswerVo
	) {
		int chk = service.createAnswer(snsAnswerVo);
		Map<String, String> result = new HashMap<>();
		if(chk > 0) {
			result.put("result", "ok");
		}else {
			result.put("result", "fail");
		}
		return result;
	}
	
	
	/**
	 * @param snsAnswerVo
	 * @return 댓글 수정
	 */
	@ResponseBody
	@PostMapping("/answerUpdate.do")
	public Map<String, String> snsAnswerUpdate(
		@RequestBody SnsAnswerVO snsAnswerVo
	) {
		int chk = service.updateAnswer(snsAnswerVo);
		Map<String, String> result = new HashMap<>();
		if(chk > 0) {
			result.put("result", "ok");
		}else {
			result.put("result", "fail");
		}
		return result;
	}
	
	
	/**
	 * @param snsAnswerVo
	 * @return 댓글 삭제
	 */
	@ResponseBody
	@PostMapping("/answerDelete.do")
	public Map<String, String> snsAnswerDelete(
		@RequestBody SnsAnswerVO snsAnswerVo
	) {
		int chk = service.deleteAnswer(snsAnswerVo);
		Map<String, String> result = new HashMap<>();
		if(chk > 0) {
			result.put("result", "ok");
		}else {
			result.put("result", "fail");
		}
		return result;
	}
}