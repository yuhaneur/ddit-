package kr.or.ddit.project.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.paging.BootstrapPaginationRenderer;
import kr.or.ddit.paging.PaginationInfo;
import kr.or.ddit.paging.PaginationRenderer;
import kr.or.ddit.paging.SimpleCondition;
import kr.or.ddit.project.service.ProjectService;
import kr.or.ddit.vo.CmmnCodeVO;
import kr.or.ddit.vo.ProjectStudentMappingVO;
import kr.or.ddit.vo.UsersVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/project/{projectNo}")
public class SettingController {
	public static final String MODELNAME="newTeam";
	
	@Autowired
	private ProjectService service;
	
	@ModelAttribute(MODELNAME)
	public ProjectStudentMappingVO newTeam() {
		return new ProjectStudentMappingVO();
	}
	
	@GetMapping("teamList")
	public String listUI(@PathVariable int projectNo, Model model ,@ModelAttribute CmmnCodeVO cmmnCodeVO) {
		List<CmmnCodeVO> code = service.CmmnCodeList();
		log.info("codeList찾기{}:" ,code);
		model.addAttribute("codeList",code);
		return "project/setting";
	}
	
	@GetMapping(value="teamList", produces = MediaType.APPLICATION_JSON_VALUE)
	public String teamList(Model model,
			@RequestParam(required = false , defaultValue = "1") int currentPage 
			,@ModelAttribute("condition")SimpleCondition simpleCondition,@PathVariable int projectNo
			
			) {
		simpleCondition.setSearchType("user");
		PaginationInfo paging =new PaginationInfo(4,3);
		paging.setCurrentPage(currentPage);
		paging.setSimpleCondition(simpleCondition);
		
		List<UsersVO> user = service.retrieveUserList(paging, projectNo);
		
		log.info("userList찾기:{}",user);
		model.addAttribute("userList",user);
		
		PaginationRenderer render = new BootstrapPaginationRenderer();
		model.addAttribute("pagingFunction", "paging");
		String pagingHTML = render.renderPagination(paging, "paging");
		model.addAttribute("pagingHTML",pagingHTML);
		
		return "jsonView";
		
	}
	@GetMapping("teaminsert")
	public String insertHandler(Model model) {
		
		return "project/setting";
	}
	@PostMapping("teaminsert")
	public String myTeamInsert(
			@Valid @ModelAttribute(MODELNAME) ProjectStudentMappingVO newTeam
			,BindingResult errors
			,RedirectAttributes redirectAttributes
			) {
		log.info("new myTeam :{}",newTeam);
		
		if(errors.hasErrors()) {
			System.out.println(errors.getAllErrors());
			redirectAttributes.addFlashAttribute(MODELNAME, newTeam);
			redirectAttributes.addFlashAttribute(BindingResult.MODEL_KEY_PREFIX + MODELNAME,errors
					);
			return "redirect:/project/teaminsert";
		}else {
			service.insertTeam(newTeam);
			return "redirect:/project";
		}
	}
}
	


